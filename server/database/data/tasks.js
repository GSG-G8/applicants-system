const Task = require('../models/technicalTask');

module.exports = async () => {
  const task = [
    {
      taskName: 'Installing a text editor',
      taskDescription:
        "Introduction A text editor is by far the most used developer tool regardless of what type of developer you are. A good text editor can help you write better code with real-time code checking, syntax highlighting, and automatic formatting.Why can't I use Microsoft Word? Rich text editors, such as Microsoft Word and Libre-Office Writer, are great for writing a paper, but the features that make them good at creating nicely formatted documents make them unsuitable for writing code. A document created with these rich text editors have more than just text embedded in their files. These files also contain information on how to display the text on the screen and data on how to display graphics embedded into the document. In contrast, plain text editors, such as VSCode and Sublime, don't save any additional information. Saving only the text allows other programs, like Ruby's interpreter, to read and execute the file as code. Code Editors You can think of code editors as specialized web development tools. They are highly customizable and offer many features that will make your life easier. There is nothing worse than spending 2 hours trying to figure out why your program isn't working only to realize that you missed a closing bracket. Plugins, syntax highlighting, auto-closing of brackets and braces, and linting are just a few of the benefits of using a code editor. There are many text editors out there to choose from, but we suggest starting with either VSCode or Sublime. VSCode is an excellent free code editor. It has outstanding add-on support and great Git integration. VSCode is the most popular code editor among many of our students and mentors, so support is easy to find in the community. You can download and install it from here. Sublime is extremely light-weight and flexible, making it favored by many. However, it's not free. You can use it for a while and then decide for yourself if it's worth purchasing. You can check it out and install it here.Atom is another free code editor created by GitHub. There were a few questions about whether Atom would be shut down when Microsoft (creators of VSCode purchased GitHub but Microsoft has said the two text editors will continue to exist. You can check out this third option here. Which editor you use is generally a matter of preference, but for the purposes of this course, we are going to assume you're using VSCode, mainly because it's free, it's easy to use, and it works pretty much the same on every operating system.",
    },
    {
      taskName: 'Introduction',
      taskDescription:
        "Introduction to Front End ProgrammingIntroductionThe \"front-end languages\" live in the browser. After you type an address into the address bar at the top and hit the enter/return key, your browser will receive at least an HTML file from the web server. That file will likely tell the browser to request a CSS file and a JavaScript file as well (probably many more than one, but we'll keep it simple).Each of these languages performs a separate but very important function and they work harmoniously together to determine how the web page is STRUCTURED (HTML), how it LOOKS (CSS), and how it FUNCTIONS (JavaScript). And keep in mind that your browser handles figuring out how to make these files into a functioning web page (not the server). Front-end web development is NOT design (you won't be playing around in Photoshop or anything), but a front-end developer does apply the work of designers to the web page by translating their well-designed layouts into real code. The front-end developer stands between the designer on one end and the back-end developer on the other, translating the design into code and plugging the data from the back-end developer into the right spots. He or she must also handle all the possible interactions that the user may need to make with the page. On the front end, you will need to be highly conscious of who your user is and how they will be interacting with your web page, because you are building their gateway to your page or product. This may mean gaining a strong understanding of accessibility and things like responsive development down the line, but first you need to build up your toolkit and pick up the fundamentals of the front-end languages. In the following lessons, you'll get a healthy understanding of each of the three front-end languages. To get warmed up, we'll start at the high level.Learning Outcomes Look through these now and then use them to test yourself after doing the assignment: What is the role of HTML in a web page?What is the role of CSS in a web page? What is the role of JavaScript in a web page? AssignmentRead a brief intro to front-end development from this interview with Nick Schaden Get a high-level overview of how all three languages work together in MDN's Getting started with the web. Learners should only read: Dealing with files, HTML basics, CSS basics and JavaScript basics. There is no need to implement the website; simply read about the process at this point. Familiarize yourself with these documentation pages: HTML, CSS, and JavaScript. You will not understand most of what is there just yet, but bookmark the pages for later reference. Additional Resources This section contains helpful links to other content. It isn't required, so consider it supplemental for if you need to dive deeper into something.This video is another great introduction to how the various front-end technologies interact.Skills of a Successful Front-End Web Developer from Drupal (a CMS based on PHP).",
    },
    {
      taskName: 'HTML & CSS',
      taskDescription:
        'HTML & CSS Introduction HTML is the markup that contains all the actual stuff that a web page has. All the text on this page you\'re reading right now lives inside HTML tags that tell your browser how to order the content on the page. Go on, right click any element on the page and choose "Inspect Element" to open up your browser\'s Developer Tools and it will show you the structure of the page. CSS tells the browser if you want to display any of those tags a particular way, for instance, turning its background blue and pushing it a little to the left. In your Developer Tools, you can see the CSS styles in another panel, usually showing which specific properties were inherited from which lines of CSS. Learning Outcomes Look through these now and then use them to test yourself after doing the assignment: Why do we separate HTML and CSS? What are classes and IDs (and how are they different)? What are elements? What are tags? What are attributes? What are forms? What is a div? What are selectors? What are properties? What are values? What is the "query string" in a URL and what does it do? What is the difference between "pixels"and "ems"? How do CSS styles for a particular element get inherited? i.e. how does an element get its "default" styles? What are two CSS attributes you can change to push an element around on the page? What are the three different ways to include CSS in your project or use CSS to style a particular element? What is the "default stylesheet" or "user agent stylesheet"? Why use a CSS reset file? Assignment Do the some of the Free Code Camp HTML and CSS course, specifically, in the Responsive Web Design Certification: Basic HTML and HTML5 Basic CSS Responsive Web Design Principles CSS Flexbox It can be helpful to take notes or make flashcards to keep track of the most commonly used elements.',
    },
    {
      taskName: 'Developer Tools pt 1',
      taskDescription:
        "Developer Tools Introduction All of the most popular modern web browsers include a suite of tools designed to help with the development of websites. They are sometimes referred to as the web inspector. These tools allow you to inspect the HTML, CSS, JavaScript and much more on websites you visit and build. Why do you need to know how to use developer tools? Knowing how to use your browser's developer tools is an indispensable skill for a web developer. They allo you to easily and quickly track down the cause of issues and bugs, like problems with layout or other CSS hiccups. What might have taken an hour or even a few hours to track down and fix without the use of these tools often takes a matter of minutes or even seconds with the help of developer tools. you will come to see in the assignments, much, much more can be done with developer tools other than debugging CSS issues. They provide you with an incredibly powerful assortment of useful tools that will save you a lot of frustration and time as you develop your own websites.Although they offer you so many useful capabilities, learning how to use the developer tools isn't that difficult. It can feel clunky the first few times you use them, but with a little practice, you will soon find yourself comfortably using them to experiment and fix bugs with ease on your web pages. Learning Outcomes Make sure you can do each of the following once you have finished the assignments:",
    },
    {
      taskName: 'HTML Project',
      taskDescription:
        "HTML & CSS project Introductio For this mini-project, you'll deconstruct an existing web page and rebuild it. Don't worry if the links don't go anywhere and the search box doesn't do anything when you submit it. The goal is to start thinking about how elements get placed on the page and roughly how they get styled and aligned. For some of you, this may be the first time you've actually tried tos omething in HTML (very exciting!).Using the browser's developer tools (right clicking something on the page and clicking will get you there) will be your best friend. Build the page in a .html text file and open it in your browser to check it out (or try using CodePen or jsfiddle.net). To open it in your browser, just right click and select open with Chrome. Try These Before Starting These skills will be helpful for you when you start building. Either try them yourself or at least make sure you know how to do it: Two ways to move a div around on the page Stick a div onto the bottom or top of the page Identify the background color of an existing webpage Grab the URL for an image from an existing webpage Center an element horizontally Identify three ways you can include your CSS styles in a page Understand how to use classes and ids to target CSS at specific elements on the page Build a very basic form (even if it doesn't anywhere)",
    },
    {
      taskName: 'Javascript 1',
      taskDescription:
        "Variables & Operators Let's dive right in! Learning OutcomesLook through these now and then use them to test yourself after doing the assignment:How do you declare a variable?What are three different ways to declare a variable?Which one should you use when?What are the rules for naming variables? What are operators, operands, and operations? What is concatenation an what happens when you add numbers and strings together? What are the different type of operators in JavaScript? What is the difference between == and ===? What are operator precedence values? What are the increment/decrement operators? What is the difference between prefixing and post-fixing them? What are assignment operators? What is theOperator? Numbers are the building blocks of programming logic! In fact, it's hard to think of any useful programming task that doesn't involve at least a little basic math... so knowing how numbers work is obviously quite important. Luckily, it's also fairly straightforward.",
    },
    {
      taskName: 'Javascript 2',
      taskDescription:
        "Strings, Arrays & Functions Introduction There are a few extremely common types of data that you will encounter in Javascript, and these fundamentals lessons will give us a really strong foundation in all of them. Before we start digging deep, however, this article will give you a quick overview of the most common ones. Learning Outcomes Look through these now and then use them to test yourself after doing the assignment: What are the seven data types of javascript? Which data type is NOT primitive? What is the difference between single, double, and backtick quotes for strings? Which type of quote lets you embed variables/expressions into a string? How do you embed variables/expressions into a string? How do you escape characters in a string? What is the difference between slice/substring/substr? What are methods? Strings Depending on what kind of work you're doing, you might end up working more with pieces of text rather than numbers. A string is simply a piece of text... and is a fundamental building block of the language. Read and code along with yet another MDN tutorial on the topic. Go through this lesson to learn a bit more about what you can do with strings... be sure to do the exercises at the end! Vocabulary time: a method is a bit of functionality that is built into the language or into specific data types. In the previous W3Schools exercise, you learned a few methods that can be used on strings, such as indexOf and search. An exhaustive list of methods that can be used on strings can be found here. Arrays Strings and numbers may be our building blocks but as your scripts get more complex you're going to need a way to deal with large quantities of them. Luckily, JavaScript has a couple of data types that are used for just that. An Array is simply an ordered collection of items (Strings, numbers, or other things). This tutorial is a great introduction. This article covers some of the most useful built-in array methods. These fundamentals are something you'll use every day, so don't rush too much and miss out!",
    },
  ];
  await Task.create(task);
};
